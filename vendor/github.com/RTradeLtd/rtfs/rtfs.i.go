// Code generated by ifacemaker. DO NOT EDIT.

package rtfs

import (
	"context"
	"io"
	"time"

	ipfsapi "github.com/RTradeLtd/go-ipfs-api"
)

// Manager provides functions for interacting with IPFS
type Manager interface {
	// NodeAddress returns the node the manager is connected to
	NodeAddress() string
	// Add is a wrapper used to add a file to IPFS
	Add(r io.Reader, options ...ipfsapi.AddOpts) (string, error)
	// DagPut is used to store data as an ipld object
	DagPut(data interface{}, encoding, kind string) (string, error)
	// DagGet is used to get an ipld object
	DagGet(cid string, out interface{}) error
	// Cat is used to get cat an ipfs object
	Cat(cid string) ([]byte, error)
	// Stat is used to retrieve the stats about an object
	Stat(hash string) (*ipfsapi.ObjectStats, error)
	// PatchLink is used to link two objects together
	// path really means the name of the link
	// create is used to specify whether intermediary nodes should be generated
	PatchLink(root, path, childHash string, create bool) (string, error)
	// AppendData is used to modify the raw data within an object, to a max of 1MB
	// Anything larger than 1MB will not be respected by the rest of the network
	AppendData(root string, data interface{}) (string, error)
	// SetData is used to set the data field of an ipfs object
	SetData(root string, data interface{}) (string, error)
	// NewObject is used to create a generic object from a template type
	NewObject(template string) (string, error)
	// Pin is a wrapper method to pin a hash.
	// pinning prevents GC and persistently stores on disk
	Pin(hash string) error
	// PinUpdate is used to update one pin to another, while making sure all objects
	// in the new pin are local, followed by removing the old pin.
	//
	// This is an optimized version of pinning the new content, and then removing the
	// old content.
	//
	// returns the new pin path
	PinUpdate(from, to string) (string, error)
	// CheckPin checks whether or not a pin is present
	CheckPin(hash string) (bool, error)
	// Publish is used for fine grained control over IPNS record publishing
	Publish(contentHash, keyName string, lifetime, ttl time.Duration, resolve bool) (*ipfsapi.PublishResponse, error)
	// Resolve is used to resolve an IPNS hash
	Resolve(hash string) (string, error)
	// PubSubPublish is used to publish a a message to the given topic
	PubSubPublish(topic string, data string) error
	// CustomRequest is used to make a custom request
	CustomRequest(ctx context.Context, url, commad string, opts map[string]string, args ...string) (*ipfsapi.Response, error)
	// SwarmConnect is use to open a connection a one or more ipfs nodes
	SwarmConnect(ctx context.Context, addrs ...string) error
	// Refs is used to retrieve references of a hash
	Refs(hash string, recursive, unique bool) ([]string, error)
}
